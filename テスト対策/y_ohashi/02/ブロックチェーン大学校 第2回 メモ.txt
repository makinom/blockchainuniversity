■ブロックチェーン大学校 第2回
ビットコインにおける暗号学〜ハッシュ関数と楕円曲線〜

ほとんどの暗号通貨について使われてる技術

○ハッシュ関数
なんとなーくご存知のやつ。

特定のデータを関数に入力として与えると、ごちゃごちゃになったデータの塊が出てくる。
アルゴリズムによっては長さとかは違うが、ある入力を与えると、必ず同じごちゃごちゃになったデータの塊が出てくる
ユーザーのパスワードを知らずして入力した値を確認できるよ。

基本的には一方通行
逆算して元のデータを出すのは、スーパーコンピューター何千台が1億年頑張ってもわからない。

ランダウ記法？

ハッシュをかけるのは簡単だが複合化するのはチョー大変。

ユニークであること


MD5：ユニークではないケースがある
SHA1：弱いことが指摘・証明されている
→SHA1を使っている証明書はChrome的にはダメらしい
→日本のメガバンクでも緑のカギがでないページもある
SHA2：SHA1とは全く別のアルゴリズム。（SHA1を調整したものではない）
→FBIとかも最高秘密情報にSHA2とASを組み合わせた情報を暗号化してる
→まずSHA2を使っていたら問題ないだろう
→SHAアルゴリズムのコンテストがあって世界の科学者がいろいろなアルゴリズムが出された（SHA3）。SHA2が危なくなったらSHA3を使ったらいいだろうという考え方らしい

SHA2には
　SHA256
　SHA512
の2種類がある。

SHA3
　SHA384（ネーミングがよくわからないｗ）

RIPEMD160

ビットコインは2つのハッシュ関数を使って暗号化してる
SHA2が割れたとしても今すぐに危ない！ということにはならない（はず）


○取引とブロック
取引ID：　取引データをsha256で2回ハッシュしたもの
ブロックID：　ブロックヘッダの

リトルエンディアン　←→　ビッグエンディアン
　バイトの順番を入れ替えている

取引IDの生成法に弱い部分がある
　トランザクションマリアビリティ
　楕円曲線の
取引転生の問題が修正される予定（セグレゲーティッドウィッドネス？）

○Base 58(58進法エンコード)
64進法から英数字のみで見間違えられやすい文字を排除している。
サトシがBase58を作った。ビットコインアドレスの送信間違いとかを起こさないため。

ハッシュ関数ではなくてエンコードの話なのでほとんど同じデータになるケースがある。（「example data2」と「example data3」とか）

扱いづらいなぁとはなるみたい。

Base58Check
手動での書き間違いを防ぐために正しくエンコードされた値なのかチェックする。
ユーザビリティとしていいのか？という議論は進められている。
　間違っていることはわかるが、間違っているのを修正するアルゴリズムはない。

アドレス
[バージョンバイト]＋[公開鍵のハッシュ]をつけてエンコードする
この様にハッシュすると頭が同じになる。

今現在は3で始まるものはマルチシグであることが確率的におおい。

セグウィッドが実装されると3が使われるので、頭が3だと「複数署名」という


非圧縮公開鍵・圧縮された公開鍵でもアドレスの戦闘は1で始まる。

base58エンコードは圧縮だとKLで始まる。非圧縮だと5で始まる？



03 - 02 は楕円曲線の上なのか下なのかを判断するフラグ

04で始まるのは非圧縮？


ハッシュ関数まとめ
取引とブロックIDがsha256sha256で表示するのはリトルエンディアン
アドレスはバージョンバイトと公開鍵のsha256ripemd160でハッシュされた値をbase58checkでエンコードされたもの


ECDSAについて
ECDSA：楕円曲線電子署名アルゴリズム
取引に署名が含まれている必要はないがほとんどは含まれている（１＋１の答えとかもできる）

楕円曲線はハッシュ関数とはまた違った認証の仕組みとなる。
コアプロトコル（ブロックチェーン）の部分では暗号化は使われて担い

共有公開鍵暗号？

ディッフィーヘルマン？


楕円曲線のルール
・縦棒以外の直線を書いたら必ず3つの点を通過する
・接線になる直線は必ず2つ目の点を通過する


A + B = C

B = C - A


A + B + D = C
( A + B ) + D = C
A + ( B + D ) = C

加算性が維持されている？

P＝ pG
P: 公開鍵
p: 秘密鍵
G: ジェネレーターポイント


mod マイナスの概念はない

整数の点しか見ない＝整数のみで構成された分布

secp256k1
曲線の定数群

n：秘密鍵の数

mod n

mod p


秘密鍵と公開鍵


csprng
クソール（XALL？）

ECDSA

r:ランダム（署名をするときに別の乱数が必要なので）
s:シグネチャ

☆一生のお願い
暗号技術にかかわるソフトウェア。標準ライブラリを使ってください。大鉄則。

PS3が6年間海賊版が出なかった。強度な暗号技術が使われていた。
rを算出するプログラムがハードコードされていた。秘密鍵が逆算できた。


ECDSA - 署名
m: message
ｚ：ビットコインの場合はハッシュそのままの値

ECDSA - 検証
QA：公開鍵


ECDSA - 追記
決定論的に生成とは
→データをくっつけたりする過程で、ランダムな値になる
→ライブラリ的にはRFC 6979が実装されてればOKなはず。

※署名から公開鍵を導出することは可能
→ビットコインのデータには両方乗ってる。署名だけにしていいという議論もある。

ビットコインは使ってないけどウォレットソフトは暗号化技術使っているよ


特典：暗号化技術について
AES（Aはアメリカン）
HMAC　HASH MEssage　Authentication　CODE




○課題



−現状、頭が　1　or 3 じゃないケースはあるのか？


RSAを使っているPGP

GPG（LINUXに代替標準装備されているコマンド）